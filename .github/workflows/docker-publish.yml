name: Docker Publish

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches: [ "main" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  DH_REPO_NAME: ratsalad89/test1

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    environment: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Get latest version from file
      - name: Get Version
        id: get-version
        if: github.event_name != 'pull_request'
        run: |
          whoami
          pwd
          ls -la ..
          ls -la /
          echo "dh_tag_version=$(cat version.py | grep "VERSION = " | awk -F "v|'" '{print $3}')" >> $GITHUB_OUTPUT

      - name: Validate Version
        if: github.event_name != 'pull_request'
        run: |
          current_version=$(curl https://vms.globant.com/api/v1.0/cli_report/api_status | jq -r .cli_last_version | awk -F "v" '{print $2}')
          echo "Current version: $current_version"
          version_tobe_deployed=${{ steps.get-version.outputs.dh_tag_version }}
          echo "Version to be deployed: $version_tobe_deployed"
          latest_from_sort=$(echo -e "${{ steps.get-version.outputs.dh_tag_version }}\n$current_version" | sort -r | head -n1)
          echo "Latest from sort: $latest_from_sort"
          if [[ ${{ steps.get-version.outputs.dh_tag_version }} =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "todo good"
          else
            echo "Version must be in format vn.n.n whew n is an integer. eg: v1.6.9"
          fi
          
          if ! [[ ${{ steps.get-version.outputs.dh_tag_version }} =~ "^[0-9]+\.[0-9]+\.[0-9]+$" ]]; then
            echo "todo mal"
          else
            echo "Todo re mal"
          fi
          
          if [  1.6.1 = "$current_version" -o "$latest_from_sort" = "$current_version" ]; then
            echo "Version to publish must me greater than current version"
            echo "current version: " "$current_version"
            echo "version to publish: " ${{ steps.get-version.outputs.dh_tag_version }}
            exit 1
          else
            echo "OK Version to deploy: ${{ steps.get-version.outputs.dh_tag_version }}"
          fi

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login against a Docker registry except on PR
      - name: Log into registry dockerhub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: | 
            ${{env.DH_REPO_NAME}}:${{steps.get-version.outputs.dh_tag_version}}
            ${{env.DH_REPO_NAME}}:latest
          labels: ${{ steps.get-version.outputs.dh_tag_version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
